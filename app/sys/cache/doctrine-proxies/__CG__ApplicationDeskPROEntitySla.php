<?php
namespace Proxies\__CG__\Application\DeskPRO\Entity;
/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Sla extends \Application\DeskPRO\Entity\Sla implements \Doctrine\ORM\Proxy\Proxy
{
    protected $__entityPersister__;
	public $_dp_object_translatable;
    protected $__identifier__;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->__entityPersister__ = $entityPersister;
        $this->__identifier__ = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->__entityPersister__) {
            $this->__isInitialized__ = true;
            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }
            if ($this->__entityPersister__->load($this->__identifier__, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->__entityPersister__, $this->__identifier__);
        }
    }
    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }
    
    public function getWorkStartHour()
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::getWorkStartHour();
    }

    public function getWorkStartMinute()
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::getWorkStartMinute();
    }

    public function getWorkEndHour()
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::getWorkEndHour();
    }

    public function getWorkEndMinute()
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::getWorkEndMinute();
    }

    public function setWorkDays(array $days, $raw = false)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::setWorkDays($days, $raw);
    }

    public function resetHolidays()
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::resetHolidays();
    }

    public function removeHolidayKey($key)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::removeHolidayKey($key);
    }

    public function addHoliday($name, $day, $month, $year = NULL)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::addHoliday($name, $day, $month, $year);
    }

    public function getHolidaysSorted()
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::getHolidaysSorted();
    }

    public function getWarningTimeText()
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::getWarningTimeText();
    }

    public function getFailTimeText()
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::getFailTimeText();
    }

    public function setPeople($people)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::setPeople($people);
    }

    public function removePerson(\Application\DeskPRO\Entity\Person $person)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::removePerson($person);
    }

    public function addPerson(\Application\DeskPRO\Entity\Person $person)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::addPerson($person);
    }

    public function setOrganizations($organizations)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::setOrganizations($organizations);
    }

    public function removeOrganization(\Application\DeskPRO\Entity\Organization $organization)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::removeOrganization($organization);
    }

    public function addOrganization(\Application\DeskPRO\Entity\Organization $organization)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::addOrganization($organization);
    }

    public function appliesToPerson(\Application\DeskPRO\Entity\Person $person)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::appliesToPerson($person);
    }

    public function appliesToOrganization(\Application\DeskPRO\Entity\Organization $organization)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::appliesToOrganization($organization);
    }

    public function calculateWarnDate(\Application\DeskPRO\Entity\Ticket $ticket)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::calculateWarnDate($ticket);
    }

    public function calculateFailDate(\Application\DeskPRO\Entity\Ticket $ticket)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::calculateFailDate($ticket);
    }

    public function getWorkHoursSet()
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::getWorkHoursSet();
    }

    public function calculateSlaTimeUntil($end_ts, \Application\DeskPRO\Entity\Ticket $ticket)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::calculateSlaTimeUntil($end_ts, $ticket);
    }

    public function calculateCompleted(\Application\DeskPRO\Entity\Ticket $ticket)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::calculateCompleted($ticket);
    }

    public function getSlaTestTime(\Application\DeskPRO\Entity\Ticket $ticket)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::getSlaTestTime($ticket);
    }

    public function getObjectRef()
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::getObjectRef();
    }

    public function setUntrackedModelField($field, $value)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::setUntrackedModelField($field, $value);
    }

    public function toApiData($primary = true, $deep = true, array $visited = array (
))
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::toApiData($primary, $deep, $visited);
    }

    public function getScalarData()
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::getScalarData();
    }

    public function _setNoPersist()
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::_setNoPersist();
    }

    public function _isNoPersist()
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::_isNoPersist();
    }

    public function __toString()
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::__toString();
    }

    public function fromArray(array $values)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::fromArray($values);
    }

    public function toArray($mode = 1)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::toArray($mode);
    }

    public function getKeys()
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::getKeys();
    }

    public function getFieldKeys()
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::getFieldKeys();
    }

    public function propertyFieldExists($field)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::propertyFieldExists($field);
    }

    public function get($name)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::get($name);
    }

    public function set($name, $value)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::set($name, $value);
    }

    public function __get($name)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::__get($name);
    }

    public function __set($name, $value)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::__set($name, $value);
    }

    public function __isset($name)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::__isset($name);
    }

    public function __unset($name)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::__unset($name);
    }

    public function __call($name, $arguments)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::__call($name, $arguments);
    }

    public function offsetExists($offset)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::offsetExists($offset);
    }

    public function offsetSet($offset, $value)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::offsetSet($offset, $value);
    }

    public function offsetGet($offset)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::offsetGet($offset);
    }

    public function offsetUnset($offset)
    {
        if ($this->__isInitialized__ === false) $this->__load();
        return parent::offsetUnset($offset);
    }

	public function __getPropValue__($k) { return $this->$k; }
	public function __setPropValue__($k, $v) { $this->$k = $v; }
	public function __hasRunLoad__() { if (isset($this->__entityPersister__)) return false; return true; }
    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'title', 'sla_type', 'active_time', 'work_start', 'work_end', 'work_days', 'work_timezone', 'work_holidays', 'apply_type', 'warning_trigger', 'fail_trigger', 'apply_priority', 'apply_trigger', 'ticket_slas', 'people', 'organizations');
    }
    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->__entityPersister__) {
            $this->__isInitialized__ = true;
            $class = $this->__entityPersister__->getClassMetadata();
            $original = $this->__entityPersister__->load($this->__identifier__);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->__entityPersister__, $this->__identifier__);
        }
        parent::__clone();
    }
}